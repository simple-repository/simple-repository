# Use the acc-py-devtools templates found at
# https://gitlab.cern.ch/-/ide/project/acc-co/devops/python/acc-py-devtools/blob/master/-/acc_py_devtools/templates/gitlab-ci/python.yml.
stages:
  - build
  - test
  - publish

include:
  - project: acc-co/devops/python/acc-py-gitlab-ci-templates
    file: v2/python.gitlab-ci.yml

variables:
  project_name: acc_py_index
  project_root: .
  PY_VERSION: '3.9'
  ACC_PY_BASE_IMAGE_TAG: '2021.12'
  # Use this directory to install extra wheels (such as those fetched from upstream repos)
  PIP_FIND_LINKS: "file://${CI_PROJECT_DIR}/extra-wheels/"


fetch_external_deps:
  # Whether triggered by an upstream pipeline or not, fetch the upstream built dependencies,
  # and have them installed by the ``PIP_FIND_LINKS`` environment variable.
  stage: build
  variables:  # Default values. These can be overridden by upstream trigger jobs as required.
    UPSTREAM_TRIGGER_PROJECT: acc-co/devops/python/package-index/indexing
    UPSTREAM_TRIGGER_WHEEL_JOB: build_wheel
    UPSTREAM_TRIGGER_REF: master
  needs:
    - project: "${UPSTREAM_TRIGGER_PROJECT}"
      job: "${UPSTREAM_TRIGGER_WHEEL_JOB}"
      ref: "${UPSTREAM_TRIGGER_REF}"
      artifacts: true
  script:
    - mkdir -p ./extra-wheels/
    - cp ./dist/* ./extra-wheels/
    - echo "Dependencies fetched into extra-wheels. They will be installed as a result of the PIP_FIND_LINKS environment variable (currently set as ${PIP_FIND_LINKS})."
    - export FL_DIR=$(echo "${PIP_FIND_LINKS}" | sed 's\file://\\'); echo ${FL_DIR}
    - ls -ltr ${FL_DIR} || true
  artifacts:
    paths:
      - ./extra-wheels/


build_wheel:
  extends: .acc_py_build_wheel


freeze_wheel:
  # Inject the lockfiles from the source directory into the wheel
  stage: build
  needs:
    - build_wheel
    - fetch_external_deps
  # NOTE: use a "_ci" image with the same tag as your Dockerfile
  image: registry.cern.ch/acc/acc-py_cc7_ci:2021.12
  script:
    # Figure out the wheel to install, compatible with this python version.
    - python -m pip wheel ${project_name}
      --no-deps --no-index
      --find-links ${project_root}/dist/
      --wheel-dir ${project_root}/.wheel-to-deploy
    # Lock the wheel using the existing lock-files.
    - acc-py -vv app lock ${project_root}/.wheel-to-deploy/*.whl
  artifacts:
    paths:
      - ${project_root}/.wheel-to-deploy/*.whl


# A full installation of acc-py-index, tested with pytest.
wheel_test:
  # TODO: Test the frozen wheel (by installing it with acc-py-deploy), instead of the
  #       unlocked/unfrozen one.
  extends: .acc_py_wheel_test


# A development installation of acc-py-index, tested with pytest.
test_dev:
  extends: .acc_py_dev_test
  needs:
   - fetch_external_deps


publish_container_image:
  # Build a container image with Kaniko, for more details see
  # https://gitlab.cern.ch/gitlabci-examples/build_docker_image
  extends: .acc_py_on_tag
  stage: publish
  image:
    name: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    entrypoint: ['']
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # Extract the version (according to setuptools-scm) from one of the wheels.
    - export VERSION=$(cd ${project_root}/.wheel-to-deploy/ && ls -1 *.whl | head -n 1 | cut -d'-' -f2 | tr + .)
    - echo $VERSION
  script:
    - mkdir -p ${project_root}/context/
    - cp -r ${project_root}/.wheel-to-deploy ${project_root}/context/
    - cp -r ${project_root}/extra-wheels ${project_root}/context
    - /kaniko/executor
      --context ${project_root}/context
      --dockerfile ${project_root}/Dockerfile
      --destination "${CI_REGISTRY_IMAGE}:${VERSION}"
      --destination "${CI_REGISTRY_IMAGE}:latest"


# A dev build of the documentation, made available through cern.ch/acc-py.
build_docs:
  extends: .acc_py_build_docs


# A release build of the documentation, made available through cern.ch/acc-py.
build_docs_on_tag:
  stage: publish
  extends: .acc_py_build_docs_on_tag

# Use the acc-py-devtools templates found at
# https://gitlab.cern.ch/-/ide/project/acc-co/devops/python/acc-py-devtools/blob/master/-/acc_py_devtools/templates/gitlab-ci/python.yml.
stages:
  - test
  - build-wheel
  - freeze-wheel
  - build-image

include:
  - project: acc-co/devops/python/acc-py-devtools
    file: acc_py_devtools/templates/gitlab-ci/python.yml

variables:
  project_name: acc_py_index
  project_root: .
  PY_VERSION: '3.9'

# A full installation of acc-py-index, tested with pytest.
test_install:
  extends: .acc_py_full_test

# A development installation of acc-py-index tested with pytest.
test_dev:
  extends: .acc_py_dev_test

build_wheel:
  extends:
    - .acc_py_on_tag
    - .acc_py_build_wheel
  stage: build-wheel

freeze_wheel:
  # Inject the lockfiles from the source directory into the wheel
  extends: .acc_py_on_tag
  stage: freeze-wheel
  # NOTE: use a "_ci" image with the same tag as your Dockerfile
  image: registry.cern.ch/acc/acc-py_cc7_ci:2021.12
  script:
    # Figure out the wheel to install, compatible with this python version.
    - python -m pip wheel ${project_name}
      --no-deps --no-index
      --find-links ${project_root}/wheelhouse
      --wheel-dir ${project_root}/.wheel-to-deploy
    # Lock the wheel
    - acc-py app lock ${project_root}/.wheel-to-deploy/*.whl
  artifacts:
    paths:
      - ${project_root}/.wheel-to-deploy/*.whl

build_image:
  # Build a container image with Kaniko, for more details see
  # https://gitlab.cern.ch/gitlabci-examples/build_docker_image
  extends: .acc_py_on_tag
  stage: build-image
  image:
    name: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    entrypoint: [ "" ]
  variables:
    CONTEXT: ${project_root}/.wheel-to-deploy/
    DOCKERFILE: ${project_root}/Dockerfile
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - export TAG_VERSION="$(echo $CI_COMMIT_TAG | sed 's/^v//')"
  script:
    - /kaniko/executor
      --context ${CONTEXT}
      --dockerfile ${DOCKERFILE}
      --destination "${CI_REGISTRY_IMAGE}:latest"
      --destination "${CI_REGISTRY_IMAGE}:${TAG_VERSION}"
